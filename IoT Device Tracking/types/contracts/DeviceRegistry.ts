/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DeviceRegistry {
  export type DeviceStruct = {
    deviceId: string;
    owner: AddressLike;
    status: BigNumberish;
    registrationDate: BigNumberish;
    lastUpdated: BigNumberish;
    deviceType: string;
    metadata: string;
    isInitialized: boolean;
  };

  export type DeviceStructOutput = [
    deviceId: string,
    owner: string,
    status: bigint,
    registrationDate: bigint,
    lastUpdated: bigint,
    deviceType: string,
    metadata: string,
    isInitialized: boolean
  ] & {
    deviceId: string;
    owner: string;
    status: bigint;
    registrationDate: bigint;
    lastUpdated: bigint;
    deviceType: string;
    metadata: string;
    isInitialized: boolean;
  };
}

export interface DeviceRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "emergencyDeviceTransfer"
      | "getDevice"
      | "getDevicesByOwner"
      | "getDevicesByType"
      | "getRoleAdmin"
      | "getTotalDevices"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "registerDevice"
      | "registerDeviceBatch"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transferDeviceOwnership"
      | "unpause"
      | "updateDeviceMetadata"
      | "updateDeviceStatus"
      | "updateDeviceType"
      | "validateDevice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeviceBatchRegistered"
      | "DeviceMetadataUpdated"
      | "DeviceOwnershipTransferred"
      | "DeviceRegistered"
      | "DeviceStatusUpdated"
      | "DeviceTypeUpdated"
      | "OperatorPermissionUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeviceTransfer",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getDevice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDevicesByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDevicesByType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDevices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDevice",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDeviceBatch",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDeviceOwnership",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDeviceMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeviceStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeviceType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDevice",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeviceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDevice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDevicesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDevicesByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDevices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDeviceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDeviceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDeviceMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeviceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeviceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDevice",
    data: BytesLike
  ): Result;
}

export namespace DeviceBatchRegisteredEvent {
  export type InputTuple = [
    batchSize: BigNumberish,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    batchSize: bigint,
    owner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    batchSize: bigint;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviceMetadataUpdatedEvent {
  export type InputTuple = [
    deviceId: string,
    metadata: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    metadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    metadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviceOwnershipTransferredEvent {
  export type InputTuple = [
    deviceId: string,
    previousOwner: AddressLike,
    newOwner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    previousOwner: string,
    newOwner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    previousOwner: string;
    newOwner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviceRegisteredEvent {
  export type InputTuple = [
    deviceId: string,
    owner: AddressLike,
    deviceType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    owner: string,
    deviceType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    owner: string;
    deviceType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviceStatusUpdatedEvent {
  export type InputTuple = [
    deviceId: string,
    newStatus: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    newStatus: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    newStatus: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeviceTypeUpdatedEvent {
  export type InputTuple = [
    deviceId: string,
    oldType: string,
    newType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    oldType: string,
    newType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    oldType: string;
    newType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorPermissionUpdatedEvent {
  export type InputTuple = [
    deviceId: string,
    operator: AddressLike,
    hasPermission: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    operator: string,
    hasPermission: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    operator: string;
    hasPermission: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeviceRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DeviceRegistry;
  waitForDeployment(): Promise<this>;

  interface: DeviceRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  emergencyDeviceTransfer: TypedContractMethod<
    [deviceId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getDevice: TypedContractMethod<
    [deviceId: string],
    [DeviceRegistry.DeviceStructOutput],
    "view"
  >;

  getDevicesByOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getDevicesByType: TypedContractMethod<[deviceType: string], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalDevices: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerDevice: TypedContractMethod<
    [deviceId: string, deviceType: string, metadata: string],
    [void],
    "nonpayable"
  >;

  registerDeviceBatch: TypedContractMethod<
    [deviceIds: string[], deviceTypes: string[], metadatas: string[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferDeviceOwnership: TypedContractMethod<
    [deviceId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDeviceMetadata: TypedContractMethod<
    [deviceId: string, metadata: string],
    [void],
    "nonpayable"
  >;

  updateDeviceStatus: TypedContractMethod<
    [deviceId: string, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDeviceType: TypedContractMethod<
    [deviceId: string, newType: string],
    [void],
    "nonpayable"
  >;

  validateDevice: TypedContractMethod<
    [deviceId: string],
    [[boolean, bigint] & { isValid: boolean; status: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyDeviceTransfer"
  ): TypedContractMethod<
    [deviceId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDevice"
  ): TypedContractMethod<
    [deviceId: string],
    [DeviceRegistry.DeviceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDevicesByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDevicesByType"
  ): TypedContractMethod<[deviceType: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalDevices"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDevice"
  ): TypedContractMethod<
    [deviceId: string, deviceType: string, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDeviceBatch"
  ): TypedContractMethod<
    [deviceIds: string[], deviceTypes: string[], metadatas: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferDeviceOwnership"
  ): TypedContractMethod<
    [deviceId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeviceMetadata"
  ): TypedContractMethod<
    [deviceId: string, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDeviceStatus"
  ): TypedContractMethod<
    [deviceId: string, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDeviceType"
  ): TypedContractMethod<
    [deviceId: string, newType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateDevice"
  ): TypedContractMethod<
    [deviceId: string],
    [[boolean, bigint] & { isValid: boolean; status: bigint }],
    "view"
  >;

  getEvent(
    key: "DeviceBatchRegistered"
  ): TypedContractEvent<
    DeviceBatchRegisteredEvent.InputTuple,
    DeviceBatchRegisteredEvent.OutputTuple,
    DeviceBatchRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DeviceMetadataUpdated"
  ): TypedContractEvent<
    DeviceMetadataUpdatedEvent.InputTuple,
    DeviceMetadataUpdatedEvent.OutputTuple,
    DeviceMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeviceOwnershipTransferred"
  ): TypedContractEvent<
    DeviceOwnershipTransferredEvent.InputTuple,
    DeviceOwnershipTransferredEvent.OutputTuple,
    DeviceOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "DeviceRegistered"
  ): TypedContractEvent<
    DeviceRegisteredEvent.InputTuple,
    DeviceRegisteredEvent.OutputTuple,
    DeviceRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DeviceStatusUpdated"
  ): TypedContractEvent<
    DeviceStatusUpdatedEvent.InputTuple,
    DeviceStatusUpdatedEvent.OutputTuple,
    DeviceStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeviceTypeUpdated"
  ): TypedContractEvent<
    DeviceTypeUpdatedEvent.InputTuple,
    DeviceTypeUpdatedEvent.OutputTuple,
    DeviceTypeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorPermissionUpdated"
  ): TypedContractEvent<
    OperatorPermissionUpdatedEvent.InputTuple,
    OperatorPermissionUpdatedEvent.OutputTuple,
    OperatorPermissionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DeviceBatchRegistered(uint256,address,uint256)": TypedContractEvent<
      DeviceBatchRegisteredEvent.InputTuple,
      DeviceBatchRegisteredEvent.OutputTuple,
      DeviceBatchRegisteredEvent.OutputObject
    >;
    DeviceBatchRegistered: TypedContractEvent<
      DeviceBatchRegisteredEvent.InputTuple,
      DeviceBatchRegisteredEvent.OutputTuple,
      DeviceBatchRegisteredEvent.OutputObject
    >;

    "DeviceMetadataUpdated(string,string,uint256)": TypedContractEvent<
      DeviceMetadataUpdatedEvent.InputTuple,
      DeviceMetadataUpdatedEvent.OutputTuple,
      DeviceMetadataUpdatedEvent.OutputObject
    >;
    DeviceMetadataUpdated: TypedContractEvent<
      DeviceMetadataUpdatedEvent.InputTuple,
      DeviceMetadataUpdatedEvent.OutputTuple,
      DeviceMetadataUpdatedEvent.OutputObject
    >;

    "DeviceOwnershipTransferred(string,address,address,uint256)": TypedContractEvent<
      DeviceOwnershipTransferredEvent.InputTuple,
      DeviceOwnershipTransferredEvent.OutputTuple,
      DeviceOwnershipTransferredEvent.OutputObject
    >;
    DeviceOwnershipTransferred: TypedContractEvent<
      DeviceOwnershipTransferredEvent.InputTuple,
      DeviceOwnershipTransferredEvent.OutputTuple,
      DeviceOwnershipTransferredEvent.OutputObject
    >;

    "DeviceRegistered(string,address,string,uint256)": TypedContractEvent<
      DeviceRegisteredEvent.InputTuple,
      DeviceRegisteredEvent.OutputTuple,
      DeviceRegisteredEvent.OutputObject
    >;
    DeviceRegistered: TypedContractEvent<
      DeviceRegisteredEvent.InputTuple,
      DeviceRegisteredEvent.OutputTuple,
      DeviceRegisteredEvent.OutputObject
    >;

    "DeviceStatusUpdated(string,uint8,uint256)": TypedContractEvent<
      DeviceStatusUpdatedEvent.InputTuple,
      DeviceStatusUpdatedEvent.OutputTuple,
      DeviceStatusUpdatedEvent.OutputObject
    >;
    DeviceStatusUpdated: TypedContractEvent<
      DeviceStatusUpdatedEvent.InputTuple,
      DeviceStatusUpdatedEvent.OutputTuple,
      DeviceStatusUpdatedEvent.OutputObject
    >;

    "DeviceTypeUpdated(string,string,string,uint256)": TypedContractEvent<
      DeviceTypeUpdatedEvent.InputTuple,
      DeviceTypeUpdatedEvent.OutputTuple,
      DeviceTypeUpdatedEvent.OutputObject
    >;
    DeviceTypeUpdated: TypedContractEvent<
      DeviceTypeUpdatedEvent.InputTuple,
      DeviceTypeUpdatedEvent.OutputTuple,
      DeviceTypeUpdatedEvent.OutputObject
    >;

    "OperatorPermissionUpdated(string,address,bool,uint256)": TypedContractEvent<
      OperatorPermissionUpdatedEvent.InputTuple,
      OperatorPermissionUpdatedEvent.OutputTuple,
      OperatorPermissionUpdatedEvent.OutputObject
    >;
    OperatorPermissionUpdated: TypedContractEvent<
      OperatorPermissionUpdatedEvent.InputTuple,
      OperatorPermissionUpdatedEvent.OutputTuple,
      OperatorPermissionUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
